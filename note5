filename macros "E:\SAS Codes\MACRO";
options dlcreatedir;
libname dataset 'E:\TEMP';

data test;
   do i = 1 to 1000;
      id = i;
      score = abs(5+rannor(100)*10);
      score_1 = abs(1 + rannor(200)*3);
      if abs(rannor(100) >0.8) then score_2 = .;
      else score_2 = rannor(100)+2;
      score_3 = ranuni(100)* 2 + 1;
      score_4 = ranuni(100)* 5 + 3;
      tag = rand("Bern", 0.9);
      score_0 = floor(ranuni(100)* 1000 + 1);
      score_00 = floor(ranuni(100)* 20 + 1);
      char = ''||trim(i);
      char1 = ''||trim(i+floor(ranuni(100)*2+3));
      output;
   end;
   drop i;
run;

proc rank data = test out = test_rank groups = 5;
   var score;
   ranks group;
run;


%macro rank_bound(rankVar, rankby, decm=,  dsname = , out = rank_supl);
/** @param
**  rankVar: rank variable (e.g. the result of PROC RANK)
**  rankby:  the original variable before ranking (e.g. the input of the PROC RANK) 
**  decm:    the place of digit to keep
**  dsname:  original dataset before PROC RANK
**  out:     name of the output dataset
*/
    proc sql;
        create table rk as 
            select &rankVar label = 'Rank Group',
                   min(&rankby) as min_breakpoint label = 'Sample Lower Bound',
                   max(&rankby) as max_breakpoint label = 'Sample Upper Bound'
                from &dsname
                group by &rankVar
                order by &rankVar;
    quit;
    
    data temp;
        merge rk rk(rename = min_breakpoint = temp_var firstobs = 2 keep = min_breakpoint);
        length r_endpoint 8;
        %if &decm = or &decm = 0 %then %do;
            r_endpoint = floor((temp_var + max_breakpoint)/2);
        %end;
        %else %do;
            r_endpoint = round((temp_var + max_breakpoint)/2, 10**-decm);
        %end;
        drop temp_var;
    run;
    
    data &out;
        set temp end = last;
        intl_nm = _n_;
        label intl_nm = 'Partition Flag';
        retain l_endpoint 0;
        retain miss 0;
        length interval $32;
        drop miss l_endpoint r_endpoint;
        
        if missing(min_breakpoint) then do;
            interval = "MISSING";
            miss = 1;
        end;
        else if (_n_ = 1 and miss = 0) or (_n_ = 2 and miss = 1) then do;
            interval = cats('(low,', r_endpoint, ']');
            l_endpoint = r_endpoint;
        end;
        else if last then interval = cats('(', l_endpoint, ',', 'high)');
        else do;
            interval = cats('(', l_endpoint, ',', r_endpoint, ']');
            l_endpoint = r_endpoint;
        end;
    run;
%mend;



proc rank data = test out = test_rank groups = 5;
   var score;
   ranks group;
run;

options mlogic mprint;
%rank_bound(group, score, dsname = test_rank,out = rank1);




data _null_;
   string = 'sAfa112a1';
   res = compress(string, ,'a');
   put res;
run;



%macro arrayList(start, increment, n);
   %local temp list;
   %let temp = &start;
   %let list =;
   %let count = 1;
   %do %while(&count <= &n);
      %let temp = %sysevalf(&temp + &increment);
      %let list = &list &temp;
      %let count = %eval(&count + 1);
   %end;
   &list;
%mend;

%let a = %arrayList(1.2, 2, 3);
%let b = %arrayList(-1,-2, 5);
%put &a;
%put &b;
%let c = %arrayList(1, 0, 5);
%put &c;


%macro linspace(start, end, n);
   %local temp step list;
   %let temp = &start;
   %let list = ;
   %let step = %sysevalf((&end - &start)/&n);
   %let count = 1;
   %do %while(&count <= &n);
      %let temp = %sysevalf(&temp + &step);
      %let list = &list &temp;
      %let count = %eval(&count + 1);
   %end;
   &list;
%mend;

%let a = %linspace(1.2, 2, 3);
%let b = %linspace(-1,-2, 10);
%put &a;
%put &b;
%let c = %linspace(1,1,5);
%put &c;

proc sql;

   select count(*) from test group by tag;
quit;


data _null_;
   date = month('01JAN2017'd);
   date2 = datepart(date);
   put date;
   put date2;
run;

proc sql outobs = 100;
   select distinct tag, score_00 from test group by tag, score_00 order by tag, score_00; 

quit;

proc sql outobs = 100;
   select tag, count(*)  from test group by tag; 
quit;

options minoperator;
%macro delList(list, ex_list);
   %local res;
   %let count = 1;
   %let res=;
   %do %while(%scan(&list, &count) ne);
      %if %scan(&list, &count) in &ex_list %then;
      %else %let res = %scan(&list, &count);
      %let count = %eval(&count + 1);
   %end;
   &res;
%mend;

%let temp = %delList(1 1 3, 1 3);
%put temp &temp;




%macro fmt_template(breakpoint, pattern = oc);
   %if &pattern = oc %then %do;
      %let op = %str(<-);
      %let l_brace = %str(%();
      %let r_brace = %str(]);
   %end;
   %else %if &pattern = co %then %do;
      %let op = %str(-<);
      %let l_brace = %str([);
      %let r_brace = %str(%));
   %end;
   %else %do;
      %put the pattern is not supported yet;
      %abort;
   %end;

   %local res;
   %let res = ;
   %let n = 1;
   %do %while(%scan(&breakpoint, &n, %str( )) ne);
      %let n = %eval(&n + 1);
   %end;
   %let n = %eval(&n - 1);
   %let count = 1;
   %do %while(&count < &n);
      %let temp_1 = %scan(&breakpoint, &count, %str( )); 
      %let count = %eval(&count + 1);
      %let temp_2 = %scan(&breakpoint, &count, %str( ));
      %let res = %str(&res &temp_1.&op.&temp_2 = "&l_brace.&temp_1,&temp_2.&r_brace");
   %end;
   &res
%mend;

%let res = %fmt_template(1 2 3);
%put &res;

%let res = %fmt_template(1 2 3, pattern = co);
%put &res;


data interval_test;
   do i = 4 to 0 by -1;
      if i = 0 then interval = '(low, xx]';
      else interval = cats('(',i,',', i+2,']');
      if i = 4 then interval = cats('(',i, ',high)');
      interval2 = cats('(',i+2,',', i-2,']');
      output;
   end;
   interval = 'MISSING';
   output;
run;

%macro sort_interval(dsname, sortby, out);
   data temp_data;
      set &dsname;
      x = scan(&sortby, 1,',');
      if index(x, 'low') then temp_idx = 0;
      else temp_idx = compress(x,,'kd') - 0;  
      drop x;
   run;
   proc sort data = temp_data;
      by temp_idx;
   run;
   data %if &out = %then &dsname; %else &out;;
      set temp_data;
      drop temp_idx;
   run;
%mend;
%sort_interval(interval_test, interval,out =sort_temp);
%sort_interval(interval_test, interval)

/*proc datasets library = work nolist;*/
/*   delete temp_data:;*/
/*run;*/

%macro sort_interval(dsname, sortby, out, sort_order = );
    %let count = 1;
    %let temp = %scan(&sortby, &count);
    %do %while(&temp ne);
        data temp_data_&count;
            set &dsname(keep = &temp);
            x_&count = scan(&temp, 1, ',');
            if index(x_&count, 'low') then temp_idx_&count = 0;
            else temp_idx_&count = compress(x_&count,,'kd') - 0;
            drop x_&count;          
        run;
        %let count = %eval(&count + 1);
        %let temp = %scan(&sortby, &count);
    %end;
    
    %let count = %eval(&count - 1);
    
    data temp_data;
        set &dsname;
        %do i = 1 %to &count;
            set temp_data_&i;
        %end;
    run;

    proc sort data = temp_data;
        by %do i = 1 %to &count; %scan(&sort_order, &i, %str(,)) temp_idx_&i %end;;
    run;
    data %if &out = %then &dsname; %else &out;;
        set temp_data;
        drop %do i = 1 %to &count; temp_idx_&i %end;;
    run;
%mend;
%sort_interval(interval_test, interval interval2,out =sort_temp, sort_order = %str( ,descending));
%sort_interval(interval_test, interval)

dm 'log;clear;';


data _null_;
   interval1 ='(low, 10]';
   interval2  = '(11, xx]';
   res1 = compress(interval1,,'kd');
   res2 = compress(interval2,,'kd');
   res3 = compress(scan(interval1, 1, ','), , 'kd');
   put res1 res2 res3;
   if res3 = ' ' then put 'res is empty string';
   v = vtype(res1);
   put v;
run;

data _null_;
   string = '';
   num = string -0;
   put num;
run;



proc sort data = temp_data out = sort_res;
   by temp_idx_1;
run;


proc sql;
   select * from temp_data order by temp_idx_1 asc;
quit;
