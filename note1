libname hive odbc datasrc = hive user = xxx password = xxx schema = xxx DBMAX_TEXT = 32767;

libname dataset 'E:\';


** preprocessing;
proc sql;
	drop view lon_account_mon;
	create view lon_account_mon as 
		select cust_id, sum(prcp_bal) as prcp_tot, sum(ovd_days) as ovd_days_tot
		from dwa_fat.lon_account_smon
		where dat_dt = '30JUN2018'd
		group by cust_id;
	
	create table cust_info_tag as 
		select t1.*, (case when t2.ovd_days_tot > 0 then 1 else 0 end) as tag, t2.prcp_tot
		from dataset.cust_info as t1
		left join
		lon_account_mon as t2
		on t1.cust_id = t2.cust_id;
quit;


data colset;
	set sashelp.vcolumn(keep = name memname libname);
	if memname = 'cust_info_tag' and libname = 'HIVE'; /*quite strange memname, not always uppercase?*/
	drop libnmae memname;
run;

/**more fast way**/;
proc sql;
	create table colset as 
		select name from dictionary.columns where memname in ('cust_info_tag', 'CUST_INFO_TAG');
quit;




proc sql;
	select count(*) into att_cnt from colset;
quit;

%macro create_macro;
	%do i = 1 %to &att_cnt;
		data _null;
			set colset;
			if _n_ = &i then do;
				call symputx("col&i", name, 'g');
			end;
		run;
	%end;
%mend create_macro;


data _null;
	%put _user_;
	%put _all_;
run;

%macro rename ;
	data dataset.cust_info_tag;
		set cust_info_tag;
		%do i=1 %to &att_cnt;
			rename &&col&i = var&i;
			label &&col&i = "var&i: &&col&i";
		%end;
	run;
%mend rename;


/*create the reference table*/
data colset_ref;
	set col;
	newvar= cats('var', _n_);
run;


/*other way to handle the renaming */


proc iml;
	varNames = {"var1" "var2"};
	use dataset.cust_info_tag;
	read all var varNames into X;
	close dataset.cust_info_tag;
	
	Prob = {10, 15, 20, 25, 50, 75, 95, 99}/100;
	call qntl(Pctls, X, Prob);
	print Prob Pctls[c=varNames];
quit;
proc options option = memsize value;
run;


proc hpbin data = cust_info_tag numbin=10 woe;
	target tag;
	input var8-var83;
run;

DATA TEST1;
INPUT PERSON $ CITY $ AGE $ PRODUCT $ BRAND $;
CARDS;
A SH 22 P1 APPLE
A SH 22 P2 VIVO
B BJ 35 P3 HUAWEI
B BJ 35 P4 SAMSUNG
B BJ 35 P5 SAMSUN
C GZ 50 P5 MI
;
RUN;
proc  sql;
	create  table  test2  as select distinct person ,city,age
	from  test1;
quit;
%macro trans(inds= ,tt= );
proc  transpose  data=test1(where =( person="&tt."))  out= test_&inds.(drop= _NAME_);
	var  PRODUCT;
quit;
data test1_&inds.;
	set  test_&inds.;
	format  PERSON  $20.;
	PERSON="&tt.";
run;
proc  transpose  data=test1(where =(person="&tt."))  out= test2_&inds.(drop= _NAME_);
	var  brand;
quit;
data test3_&inds.;
	set  test2_&inds.;
	format  PERSON  $20.;
	PERSON="&tt.";
run;
%mend;
%trans( inds=a,tt=A);
%trans( inds=b,tt=B);
%trans( inds=c,tt=C);
data test11;
	set  test1_:;
run;
data test11;
	set test11;
	rename col1=procuct1
		col2=procuct2
		col3=procuct3;
run;
data test33;
	set  test3_:;
run;
data test33;
	set test33;
	rename col1=brand1
		col2=brand2
		col3=brand3;
run;
proc  sql;
	create table  test_end  as select  a.*,b.*,c.*
	from   test2  as a left  join   test11  as b
	on a.PERSON=b.PERSON 
	left join  test33 as c 
	on a.PERSON=c.PERSON;
quit;


DATA TEST1;
INPUT PERSON $ CITY $ AGE $ PRODUCT $ BRAND $;
CARDS;
A SH 22 P1 APPLE
A SH 22 P2 VIVO
B BJ 35 P3 HUAWEI
B BJ 35 P4 SAMSUNG
B BJ 35 P5 SAMSUN
C GZ 50 P5 MI
;
RUN;




proc transpose data=TEST1 out=TEST2 prefix=PRODUCT;
	var PRODUCT;
	by PERSON CITY AGE;
run;
proc transpose data=TEST1 out=TEST3 prefix=BRAND;
	var BRAND;
	by PERSON CITY AGE;
run;
proc sort data=TEST2;by PERSON CITY AGE;run;
proc sort data=TEST3;by PERSON CITY AGE;run;
data rs;
	merge TEST2(in=a drop=_NAME_)
		TEST3(in=b drop=_NAME_);
	by  PERSON CITY AGE;
	if a;
run;


/*sorting a large dataset when disk space is limited*/
** method 1: realize TAGSORT by hand
** TAGSORT cannot utilize multi threads
data temp/view = temp;
set X (keep = A1 A2 A3);
	obs = _N_;
run;

proc sort data = temp out =temp;
	by A1 A2 A3;
run;

data x;
set temp (keep = obs);
	drop obs;
run;

** SAS Data step View is used in the program to save on data Input/output time. The SAS Data step View stores only the instructions to create the data  set TEMP. If the data set is too wide,  this method can be useful.

** Method2: Divide and Sort
** It is better to get rid of the temporary datasets firstly.
proc datasets library = work kill memtype = data;
quit;
run;

%macro splitsort(libref =, dataset =, num =, var=);
data _null_;
	if 0 then set &libref..&dataset nobs = count;
	call symput('numobs', put(count, 8.));
run;

%let n=%sysevalf(&numobs/&num,ceil);

data %do J=1 %to &num; dataset_&J %end; ;
set &libref..&dataset;;
	%do I = 1 %to &num;
	if %eval(&n*(&i-1)) <_n_ <= %eval(&n*&I)
	then output dataset_&I;
	%end;
run;
	
%do J = 1 %to &num;
	proc sort data = dataset_&J;
		by &var;
	run;
%end;

data sorted_dataset;
	set %do J = 1 %to &num; dataset_&J %end; ;
		by &var;

run;

%mend splitsort;
%splitsort(libref = sashelp, dataset = class, num = 3, var = age weight);

**slight modification is needed when wanting to unduplicate the original dataset.
data sorted_dataset;
	set %do J = 1 %to &num; dataset_&J %end; ;
	by &var;
	if first.%scan(&var, -1 ,' ');
    
    
    
    
    
    
 data a1(index=(x));
input x y@@;
cards;
101 1 1 10 2 20 3 30
;
run;
data b1;
input x y@@;
cards;
1 100 2 200
;
run;
data b2;
input x y @@;
cards;
1 100 2 200 2 280
;
run;
data b3;
input pnt y@@;
cards;
2 200 3 300 4 400
;
run;

proc sort data=b1;
by x;
run;
data a1;
merge al(in=ina) b1(in=inb);
by x;
if ina then output;
run;
data a1;
modify a1 b2;
by x;
run;
data a1;
set b3(rename=(y=y1));
modify a1 point=pnt;
y=y1;
run;
data master_trans;
input user_id trans_amt@@;
cards;
101 1000 102 1500 103 2000
;
run;
data day_trans;
input user_id day_amt@@;
cards;
102 50 102 60 103 30 110 80
;
run;
data master_trans;
modify master_trans day_trans;
by user_id;
trans_amt=trans_amt+day_amt;
if _iorc_=0 then replace;
else do;trans_amt=day_amt;_error_=0;
output;
end;
run;
data a;
input x$ y z@@;
cards;
a 10 20 b 30 40 c 50 60
;
run;
data _null_;
set a;
put  x= @ ;
put @15 y=4.3@;
put @25 z=2.;
run;
data a;
do i=1 to 5;
x=i+1;
put x=;
end;
run;
libname ch3 'E:\Users_Intern\test';
ods listing close;
ods output parameterstimates=et;
proc reg data=ch3.fitness outest=est;
model oxygen=age weight runtime runpulse restpulse maxpulse;
quit;
ods output close;
ods listing;
filename file 'E:\Users_Intern\test\utf.txt';
data _null_;
set sashelp.class;
file file encoding='utf-8';
put name weight;
run;
filename file 'E:\Users_Intern\test\filename.txt';
data a;
length temp $50;
file file filename=temp;
put 'abc';
fname=temp;
run;


data b;
length name $200;
input name;
name='E:\Users_Intern\test\'||strip(_infile_)||'.txt';
file anyname filevar=name;
date=date();
n=name;
format date yymmdd10.;
do;
put 'test'@;
put ','@;
put date;
end;
cards;
test_file1
test_file2
test_file3
;
run;

data _null_;
set sashelp.class(keep=name sex) nobs=obs end=last;
date=date();
file "E:\Users_Intern\test\test1.txt" dropover lrecl=32767;
if _n_=1 then
do;
put'header'@;
put date@; format date yymmdd10.;
put obs z8;
end;
do;
put name $ 1-10@;
put sex $ 15-16;
end;
if last then do;
put 'end';
end;
run;


/*??????*/
filename file 'E:\Users_Intern\test\utf.txt';
data unicode;
infile file encoding="utf-8";
input name $ weight;
run;
data num;
infile datalines dsd;
input x y z;
datalines;
,2,3
4,5,6
7,,9
;
run;
data num1;
infile datalines dsd dlm="";
input x y z;
datalines;
   2 3
 4 5 6
 7  9
 ;
run;
data weather;
infile datalines missover;
input temp1-temp5;
datalines;
97.9 98.1 98.3
98.6 99.2 99.1 98.5 97.5
96.2 97.3 98.3 97.6 96.5
;
run;


data a;
input x y;
z1=x+y;
z2=sum(x,y);
cards;
1 2 . 5 8 .
;
run;


data a;
length x $8 y 8;
x="abcde";
y=100;
run;
proc sql;
alter table a
modify
x char(3),
y num(2);
quit;
data a1;
set sashelp.class;
keep name weight;
run;
data a2;
set sashelp.class(keep=name weight);
run;
data a3;
set sashelp.class(keep=name weight);
x=1;
keep name x;
run;
data a4(keep=name x);
set sashelp.class(keep=name weight);
x=1;
run;
data a5;
set sashelp.class(keep=_character_);
run;
data a6;
set sashelp.class(keep=_numeric_);
run;
data retain_mis;
input id x@@;
cards;
1 10 2 10 3 .
4 . 5 20 6 .
;
run;
data a;
set retain_mis;
retain new_x;
if x ne . then new_x=x;
run;
libname chap4 "E:\Users_Intern\test";
data chap4.retain1;
input id txn_cde$ cns txn_dte$;
cards;
10 101 10 20070101
10 101 20 20080402
10 201 30 20050203
20 101 40 20040105
20 201 50 20040105
20 301 60 20070806
20 201 70 20050607
30 301 80 20070501
30 401 90 20070306
;
run;

proc sql;
create table sum as
select
id
,sum(cns) as cns
,count(*) as count
,sum(case when txn_cde in("101" "201") then 1 else 0 end) as cnt_condi
,min(txn_dte)as min_txn_dte
from chap4.retain1;
group by id
;
quit;

proc sort data=chap4.retain1;by id txn_dte;run;
data test1;
set chap4.retain1;
by id txn_dte;
retain min_dte sum_cns cnt_condition;
if first.id then do;
min_dte=txn_dte;
sum_cns=0;
cnt=0;
cnt_condtion=0;
end;
min_dte=min(min_dte,txn_dte);
sum_cns+cns;
cnt+1;
cnt_condition+(txn_cde in("101" "201"));
if last.id;
run;

libname chap4 "E:\Users_Intern\test";
data chap4.retain2;
input id flag cde$ @@;
cards;
10 1 a 10 0 b 10 0 c
20 1 a 20 0 . 20 0 .
30 1 . 30 0 .
;
run;

proc sort data=chap4.retain2;by id descending flag;run;
data test2;
set chap4.retain2;
by id descending flag;
retain new;
if first.id then do;
   if cde eq "" then new="null";
   else new=cde;
   end;
   if cde ne "" then new=cde;
run;

data a;
set sashelp.class(keep=sex height weight);
run;
proc tabulate data=a;
class sex;
var height weight;
table sex*(height weight),mean;
run;
libname clinic 'E:\Users_Intern\test';
proc print data=clinic.admit;
run;

proc datasets;
contents data=sasueser._all_nods;
quit;
options nonumber nodate;
proc print data=sashelp.class;
var name sex age height weight;
where age>=10;
run;
options date;
proc freq data=sashelp.class;
where height>=60;
tables sex;
run;
options nodate pageno=3;
proc print data=sashelp.class;
run;
proc options;
run;

proc options option=yearcutoff;
run;
proc setinit;
run;
proc sort data=sashelp.class;
by weight;
run;
proc print data=sashelp.class noobs;
var age name height weight;
where age>12;
run;
libname chap4 'E:\Users_Intern\test';
proc print data=chap4.retain1;
id id;
var id cns;/*若没有var,则默认print所有变量*/
run;
proc sort data=sashelp.class out=work.a;
by descending weight;
run;

proc print data=chap4.retain1;
var id txn_cde cns txn_dte;
sum cns;
by id;
id id;
pageby id;
run;
title1 'SAS system';
title3 'sas system';
proc print data=sashelp.class;
run;
title1 'The SAS System';
proc print data=sashelp.class;
run;
footnote1 '';
proc print data=sashelp.class;
run;
title1;
proc print data=sashelp.class;
run;
proc tabulate data=sashelp.class;
var  height weight;
table max*(height weight);
run;

filename  test2 'E:\Users_Intern\test\test2.xlsx';
data exercise;
 infile test2;
input name$ age height weight;
run;
proc import datafile='E:\Users_Intern\test\test21.xls' out=a dbms=excel
replace;
run;
proc format fmtlib;
value idfmt
10='a'
20='b'
30='c';
run;
proc print data=chap4.retain1;
format id idfmt.;
footnote;
run;
proc print data=chap4.retain1;
run;
proc report data=sashelp.class nowd;
column name sex height age weight;
where age in (11,14,16);
define height/format=5.1 order descending;
run;
option pageno=1 nodate ps=64 ls=80;
data temp;
input x@@;
cards;
10 20 30
;
run;
data test(drop=i);
set temp;
array a(5) A1-A5;
do i=1 to 5;
   a(i)=i;
end;
run;
proc print noobs data=test;
run;
data missing;
input x y$ z$ m;
cards;
. . . 1
2 . 3 .
;
run;
proc print noobs data=missing;
run;
data result;
set missing;
array char _character_;
array numr _numeric_;
do over char;
if char eq "" then char="null";
end;
do over numr;
if numr eq . then numr=0;
end;
run;
data score;
input id$ x y z;
cards;
a 75 84 65
b 54 74 71
c 51 56 52
d 50 50 60
;
run;
